[{"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\index.js":"1","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Root.js":"2","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Mainpage.js":"3","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Board.js":"4","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Profile.js":"5","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\App.js":"6","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Questions.js":"7","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\UserDataContext.js":"8","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Test.js":"9","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Signup.js":"10"},{"size":269,"mtime":1689415275681,"results":"11","hashOfConfig":"12"},{"size":972,"mtime":1689426770335,"results":"13","hashOfConfig":"12"},{"size":1178,"mtime":1689565819991,"results":"14","hashOfConfig":"12"},{"size":3291,"mtime":1689619629701,"results":"15","hashOfConfig":"12"},{"size":1971,"mtime":1689619635312,"results":"16","hashOfConfig":"12"},{"size":2827,"mtime":1689619615059,"results":"17","hashOfConfig":"12"},{"size":10248,"mtime":1689619698916,"results":"18","hashOfConfig":"12"},{"size":359,"mtime":1689426520672,"results":"19","hashOfConfig":"12"},{"size":5291,"mtime":1689619698842,"results":"20","hashOfConfig":"12"},{"size":3465,"mtime":1689619698844,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10eje4r",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\index.js",[],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Root.js",[],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Mainpage.js",[],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Board.js",["55"],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Profile.js",["56"],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\App.js",[],[],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Questions.js",["57","58"],[],"import React, { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"./Questions.css\";\r\nimport { format } from \"date-fns\";\r\nimport { UserDataContext } from \"./UserDataContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Questions = () => {\r\n  const navigate = useNavigate();\r\n  const goToMain = () => {\r\n    navigate(\"/Mainpage\");\r\n  };\r\n  const { userData } = useContext(UserDataContext);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [userId, setUserId] = useState(1);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\r\n  const [voteCounts, setVoteCounts] = useState({\r\n    E: { yes: 0, no: 0 },\r\n    I: { yes: 0, no: 0 },\r\n    N: { yes: 0, no: 0 },\r\n    S: { yes: 0, no: 0 },\r\n    T: { yes: 0, no: 0 },\r\n    F: { yes: 0, no: 0 },\r\n    P: { yes: 0, no: 0 },\r\n    J: { yes: 0, no: 0 },\r\n  });\r\n  const [showWriteModal, setShowWriteModal] = useState(false);\r\n  const [newQuestion, setNewQuestion] = useState({ title: \"\", content: \"\" });\r\n  const [userVote, setUserVote] = useState(null);\r\n\r\n  const handleWriteShow = () => {\r\n    setShowWriteModal(true);\r\n  };\r\n\r\n  const handleWriteClose = () => {\r\n    setShowWriteModal(false);\r\n  };\r\n\r\n  const handleWriteComplete = async () => {\r\n    try {\r\n      await axios.post(`${process.env.REACT_APP_server_uri}/questions`, {\r\n        user_id: userId,\r\n        post_time: format(new Date(), \"yyyy-MM-dd HH:mm:ss\"),\r\n        ...newQuestion,\r\n      });\r\n\r\n      alert(\"글 작성이 완료되었습니다.\");\r\n\r\n      setShowWriteModal(false);\r\n      setNewQuestion({ title: \"\", content: \"\" });\r\n    } catch (err) {\r\n      alert(err.response.data.message);\r\n    }\r\n  };\r\n\r\n  const fetchUserId = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_server_uri}/user/${userData.nickname}`\r\n      );\r\n      setUserId(response.data.userId);\r\n      console.log(userId);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    fetchUserId();\r\n  }, [fetchUserId]);\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_server_uri}/questions`\r\n      );\r\n      setQuestions(response.data);\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  const fetchVoteCounts = async () => {\r\n    if (!selectedQuestion) return;\r\n\r\n    const response = await axios.get(\r\n      `${process.env.REACT_APP_server_uri}/questions/${selectedQuestion.id}/votes`\r\n    );\r\n    setVoteCounts(response.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchVoteCounts();\r\n  }, [selectedQuestion]);\r\n\r\n  const handleClose = () => setShowModal(false);\r\n  const handleShow = async (question) => {\r\n    setSelectedQuestion(question);\r\n    const response = await axios.get(\r\n      `${process.env.REACT_APP_server_uri}/questions/${question.id}/votes`\r\n    );\r\n    setVoteCounts(response.data);\r\n    const voteResponse = await axios.get(\r\n      `${process.env.REACT_APP_server_uri}/questions/${question.id}/vote/${userId}`\r\n    );\r\n\r\n    setUserVote(voteResponse.data.vote || null);\r\n\r\n    setShowModal(true);\r\n  };\r\n\r\n  const Bar = ({ yes, no }) => {\r\n    const total = yes + no;\r\n    const yesWidth = total > 0 ? (yes / total) * 100 : 0;\r\n    const noWidth = total > 0 ? (no / total) * 100 : 0;\r\n\r\n    return (\r\n      <div style={{ margin: \"10px 0\" }}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            height: 20,\r\n            backgroundColor: \"#ddd\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              width: `${yesWidth}%`,\r\n              backgroundColor: \"#01DF74\",\r\n              height: \"100%\",\r\n            }}\r\n          />\r\n          <div\r\n            style={{\r\n              width: `${noWidth}%`,\r\n              backgroundColor: \"red\",\r\n              height: \"100%\",\r\n            }}\r\n          />\r\n        </div>\r\n        <p style={{ textAlign: \"center\" }}>\r\n          {`${yesWidth.toFixed(0)}% vs ${noWidth.toFixed(0)}%`}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const vote = async (voteValue) => {\r\n    try {\r\n      await axios.post(`${process.env.REACT_APP_server_uri}/vote`, {\r\n        question_id: selectedQuestion.id,\r\n        user_id: userId,\r\n        vote: voteValue === \"1번\" ? 1 : 2,\r\n      });\r\n      alert(\"투표가 완료되었습니다.\");\r\n      setUserVote(voteValue === \"1번\" ? 1 : 2);\r\n      fetchVoteCounts();\r\n    } catch (err) {\r\n      alert(err.response.data.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button\r\n        style={{ position: \"absolute\", top: 50, right: 50, borderRadius: 15 }}\r\n        onClick={goToMain}\r\n      >\r\n        메인 페이지로 이동\r\n      </button>\r\n      <h1\r\n        style={{\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        [질문 리스트]\r\n      </h1>\r\n      <div\r\n        style={{\r\n          textAlign: \"left\",\r\n          overflowY: \"auto\",\r\n          maxHeight: \"700px\",\r\n        }}\r\n      >\r\n        {questions.map((question) => (\r\n          <div\r\n            className=\"questions\"\r\n            key={question.id}\r\n            onClick={() => handleShow(question)}\r\n            style={{\r\n              marginTop: 20,\r\n            }}\r\n          >\r\n            <h2>{question.title}</h2>\r\n            <p>\r\n              {format(new Date(question.post_time), \"yyyy-MM-dd HH:mm\")} by{\" \"}\r\n              {question.user_nickname}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div>\r\n        <Button onClick={handleWriteShow}>글 쓰기</Button>\r\n      </div>\r\n      {selectedQuestion && (\r\n        <Modal show={showModal} onHide={handleClose} size=\"lg\">\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{selectedQuestion.title}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>\r\n              {`${format(\r\n                new Date(selectedQuestion.post_time),\r\n                \"yyyy-MM-dd HH:mm\"\r\n              )} by ${selectedQuestion.user_nickname}`}\r\n            </p>\r\n            <p>{selectedQuestion.content}</p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Button\r\n                className={`bt1 ${userVote === 1 ? \"voted\" : \"\"}`}\r\n                variant={userVote === 1 ? \"success\" : \"primary\"}\r\n                onClick={() => vote(\"1번\")}\r\n                disabled={userVote !== null}\r\n              >\r\n                1번 : {selectedQuestion.A1}\r\n              </Button>\r\n              <Button\r\n                className={`bt2 ${userVote === 2 ? \"voted\" : \"\"}`}\r\n                variant={userVote === 2 ? \"danger\" : \"secondary\"}\r\n                onClick={() => vote(\"2번\")}\r\n                disabled={userVote !== null}\r\n              >\r\n                2번 : {selectedQuestion.A2}\r\n              </Button>\r\n\r\n              {userVote !== null && <p>이미 투표하셨습니다.</p>}\r\n            </div>\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                flexWrap: \"wrap\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              <div style={{ flex: \"0 0 45%\", margin: \"0 20px\" }}>\r\n                <h4>E</h4>\r\n                <Bar yes={voteCounts.E.yes} no={voteCounts.E.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\" }}>\r\n                <h4>I</h4>\r\n                <Bar yes={voteCounts.N.yes} no={voteCounts.N.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\", margin: \"0 20px\" }}>\r\n                <h4>N</h4>\r\n                <Bar yes={voteCounts.T.yes} no={voteCounts.T.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\" }}>\r\n                <h4>S</h4>\r\n                <Bar yes={voteCounts.P.yes} no={voteCounts.P.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\", margin: \"0 20px\" }}>\r\n                <h4>T</h4>\r\n                <Bar yes={voteCounts.I.yes} no={voteCounts.I.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\" }}>\r\n                <h4>F</h4>\r\n                <Bar yes={voteCounts.S.yes} no={voteCounts.S.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\", margin: \"0 20px\" }}>\r\n                <h4>P</h4>\r\n                <Bar yes={voteCounts.F.yes} no={voteCounts.F.no} />\r\n              </div>\r\n              <div style={{ flex: \"0 0 45%\" }}>\r\n                <h4>J</h4>\r\n                <Bar yes={voteCounts.J.yes} no={voteCounts.J.no} />\r\n              </div>\r\n            </div>\r\n          </Modal.Body>\r\n        </Modal>\r\n      )}\r\n\r\n      {showWriteModal && (\r\n        <Modal show={showWriteModal} onHide={handleWriteClose} size=\"lg\">\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>새 질문 작성</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <label>\r\n              제목:\r\n              <input\r\n                type=\"text\"\r\n                value={newQuestion.title}\r\n                onChange={(e) =>\r\n                  setNewQuestion({ ...newQuestion, title: e.target.value })\r\n                }\r\n              />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              내용:\r\n              <textarea\r\n                value={newQuestion.content}\r\n                onChange={(e) =>\r\n                  setNewQuestion({ ...newQuestion, content: e.target.value })\r\n                }\r\n              />\r\n            </label>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleWriteClose}>\r\n              취소\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleWriteComplete}>\r\n              작성 완료\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Questions;\r\n","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\UserDataContext.js",[],[],"C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Test.js",["59","60","61"],[],"import { useContext, useState, React, useEffect, useCallback } from \"react\";\r\nimport \"./Test.css\";\r\nimport { UserDataContext } from \"./UserDataContext\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Test = () => {\r\n  const navigate = useNavigate();\r\n  const [userm1, setUserm1] = useState(\"m1\");\r\n  const [userm2, setUserm2] = useState(\"m2\");\r\n  const [userm3, setUserm3] = useState(\"m3\");\r\n  const [userm4, setUserm4] = useState(\"m4\");\r\n  const [testm1, setTestm1] = useState(\"tm1\");\r\n  const [testm2, setTestm2] = useState(\"tm2\");\r\n  const [testm3, setTestm3] = useState(\"tm3\");\r\n  const [testm4, setTestm4] = useState(\"tm4\");\r\n  const [vars, setVars] = useState(0);\r\n  const [hasSubmitted, setHasSubmitted] = useState(false);\r\n\r\n  /////\r\n\r\n  const { userData, setUserData } = useContext(UserDataContext);\r\n\r\n  useEffect(() => {\r\n    const storedUserData = localStorage.getItem(\"userData\");\r\n    if (storedUserData) {\r\n      setUserData(JSON.parse(storedUserData));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"userData\", JSON.stringify(userData));\r\n  }, [userData]);\r\n\r\n  /////\r\n\r\n  const goToMain = () => {\r\n    navigate(\"/Mainpage\");\r\n  };\r\n\r\n  const questions = [\r\n    \"질문 1\",\r\n    \"질문 2\",\r\n    \"질문 3\",\r\n    \"질문 4\",\r\n    \"질문 5\",\r\n    \"질문 6\",\r\n    \"질문 7\",\r\n    \"질문 8\",\r\n    \"질문 9\",\r\n    \"질문 10\",\r\n    \"질문 11\",\r\n    \"질문 12\",\r\n  ];\r\n\r\n  const choices = [\"매우 그렇다\", \"그렇다\", \"보통\", \"아니다\", \"매우 아니다\"];\r\n\r\n  const [answers, setAnswers] = useState(Array(questions.length).fill(\"\"));\r\n\r\n  const handleButtonClick = (index, choice) => {\r\n    let newAnswers = [...answers];\r\n    newAnswers[index] = choice;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      testm1 !== \"\" &&\r\n      testm2 !== \"\" &&\r\n      testm3 !== \"\" &&\r\n      testm4 !== \"\" &&\r\n      !answers.includes(\"\") &&\r\n      vars === 1\r\n    ) {\r\n      setVars(999);\r\n      if (\r\n        userData.m1 === testm1 &&\r\n        userData.m2 === testm2 &&\r\n        userData.m3 === testm3 &&\r\n        userData.m4 === testm4\r\n      ) {\r\n        alert(\r\n          `${userData.nickname}님의 원래 MBTI는 ${userm1}${userm2}${userm3}${userm4}이고, 검사 결과 나온 MBTI는 ${testm1}${testm2}${testm3}${testm4}입니다. 바꾸시겠습니까?`\r\n        );\r\n      } else {\r\n        const isConfirmed = window.confirm(\r\n          `${userData.nickname}님의 원래 MBTI는 ${userm1}${userm2}${userm3}${userm4}이고, 검사 결과 나온 MBTI도 ${testm1}${testm2}${testm3}${testm4}입니다`\r\n        );\r\n\r\n        if (isConfirmed) {\r\n          axios.put(\r\n            `${process.env.REACT_APP_server_uri}/user/${userData.nickname}`,\r\n            {\r\n              m1: testm1,\r\n              m2: testm2,\r\n              m3: testm3,\r\n              m4: testm4,\r\n            }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }, [testm1, testm2, testm3, testm4, answers]);\r\n\r\n  const handleSubmit = () => {\r\n    if (answers.includes(\"\")) {\r\n      alert(\"응답하지 않은 항목이 있습니다.\");\r\n    } else {\r\n      setVars(vars + 1);\r\n      setTestm1(\"I\");\r\n      setTestm2(\"S\");\r\n      setTestm3(\"F\");\r\n      setTestm4(\"J\");\r\n      setHasSubmitted(true);\r\n    }\r\n  };\r\n\r\n  const fetchUserMBTI = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_server_uri}/user/${userData.nickname}`\r\n      );\r\n      setUserm1(response.data.m1);\r\n      console.log(userm1);\r\n      setUserm2(response.data.m2);\r\n      console.log(userm2);\r\n      setUserm3(response.data.m3);\r\n      setUserm4(response.data.m4);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }, [userData]);\r\n\r\n  useEffect(() => {\r\n    fetchUserMBTI();\r\n  }, [fetchUserMBTI]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button\r\n        style={{ position: \"absolute\", top: 50, right: 50, borderRadius: 15 }}\r\n        onClick={goToMain}\r\n      >\r\n        메인 페이지로 이동\r\n      </button>\r\n      <h1 style={{ textAlign: \"center\" }}>약식 MBTI 검사</h1>\r\n      <div\r\n        style={{\r\n          overflow: \"auto\",\r\n          maxHeight: \"80vh\",\r\n          textAlign: \"center\",\r\n          overflowY: \"auto\",\r\n        }}\r\n      >\r\n        {questions.map((question, index) => (\r\n          <div key={index}>\r\n            <h3>{question}</h3>\r\n            {choices.map((choice, choiceIndex) => (\r\n              <button\r\n                key={choiceIndex}\r\n                onClick={() => handleButtonClick(index, choice)}\r\n                style={{\r\n                  backgroundColor:\r\n                    answers[index] === choice ? \"skyblue\" : \"#A4A4A4\",\r\n                  marginRight: 10,\r\n                  marginBottom: 15,\r\n                  borderRadius: 10,\r\n                }}\r\n              >\r\n                {choice}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button\r\n        onClick={handleSubmit}\r\n        style={{\r\n          marginTop: 10,\r\n          borderRadius: 10,\r\n          backgroundColor: hasSubmitted ? \"darkgrey\" : \"blue\",\r\n        }}\r\n        disabled={hasSubmitted}\r\n      >\r\n        답변 완료\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Test;\r\n","C:\\Users\\frica\\Madcamp\\Week3\\Week3_web\\week3\\src\\Signup.js",[],[],{"ruleId":"62","severity":1,"message":"63","line":29,"column":6,"nodeType":"64","endLine":29,"endColumn":8,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"63","line":23,"column":6,"nodeType":"64","endLine":23,"endColumn":8,"suggestions":"66"},{"ruleId":"62","severity":1,"message":"67","line":68,"column":6,"nodeType":"64","endLine":68,"endColumn":16,"suggestions":"68"},{"ruleId":"62","severity":1,"message":"69","line":94,"column":6,"nodeType":"64","endLine":94,"endColumn":24,"suggestions":"70"},{"ruleId":"62","severity":1,"message":"63","line":29,"column":6,"nodeType":"64","endLine":29,"endColumn":8,"suggestions":"71"},{"ruleId":"62","severity":1,"message":"72","line":103,"column":6,"nodeType":"64","endLine":103,"endColumn":47,"suggestions":"73"},{"ruleId":"62","severity":1,"message":"74","line":132,"column":6,"nodeType":"64","endLine":132,"endColumn":16,"suggestions":"75"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setUserData'. Either include it or remove the dependency array.","ArrayExpression",["76"],["77"],"React Hook useCallback has a missing dependency: 'userId'. Either include it or remove the dependency array.",["78"],"React Hook useEffect has a missing dependency: 'fetchVoteCounts'. Either include it or remove the dependency array.",["79"],["80"],"React Hook useEffect has missing dependencies: 'userData.m1', 'userData.m2', 'userData.m3', 'userData.m4', 'userData.nickname', 'userm1', 'userm2', 'userm3', 'userm4', and 'vars'. Either include them or remove the dependency array.",["81"],"React Hook useCallback has missing dependencies: 'userm1' and 'userm2'. Either include them or remove the dependency array.",["82"],{"desc":"83","fix":"84"},{"desc":"83","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"83","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [setUserData]",{"range":"95","text":"96"},{"range":"97","text":"96"},"Update the dependencies array to be: [userData.nickname, userId]",{"range":"98","text":"99"},"Update the dependencies array to be: [fetchVoteCounts, selectedQuestion]",{"range":"100","text":"101"},{"range":"102","text":"96"},"Update the dependencies array to be: [testm1, testm2, testm3, testm4, answers, vars, userData.m1, userData.m2, userData.m3, userData.m4, userData.nickname, userm1, userm2, userm3, userm4]",{"range":"103","text":"104"},"Update the dependencies array to be: [userData.nickname, userm1, userm2]",{"range":"105","text":"106"},[937,939],"[setUserData]",[776,778],[2099,2109],"[userData.nickname, userId]",[2698,2716],"[fetchVoteCounts, selectedQuestion]",[1021,1023],[2771,2812],"[testm1, testm2, testm3, testm4, answers, vars, userData.m1, userData.m2, userData.m3, userData.m4, userData.nickname, userm1, userm2, userm3, userm4]",[3541,3551],"[userData.nickname, userm1, userm2]"]